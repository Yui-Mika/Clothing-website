# ============================================================================
# IMPORT LIBRARIES - Nh·∫≠p c√°c th∆∞ vi·ªán c·∫ßn thi·∫øt
# ============================================================================

# APIRouter: T·∫°o router ƒë·ªÉ ƒë·ªãnh nghƒ©a c√°c API endpoints
# Depends: Dependency injection - ti√™m ph·ª• thu·ªôc cho authentication
# HTTPException: Throw HTTP errors v·ªõi status code
# status: HTTP status codes (200, 401, 403...)
# Response: ƒê·ªëi t∆∞·ª£ng response ƒë·ªÉ set cookies
# Request: ƒê·ªëi t∆∞·ª£ng request ƒë·ªÉ ƒë·ªçc cookies/headers
# BackgroundTasks: Ch·∫°y t√°c v·ª• n·ªÅn (g·ª≠i email) sau khi response
from fastapi import APIRouter, Depends, HTTPException, status, Response, Request, BackgroundTasks

# UserCreate: Model cho data ƒëƒÉng k√Ω (name, email, password)
# UserLogin: Model cho data ƒëƒÉng nh·∫≠p (email, password)
# UserResponse, Token: Models cho response data
from app.models.user import UserCreate, UserLogin, UserResponse, Token

# get_collection: H√†m l·∫•y collection t·ª´ MongoDB
from app.config.database import get_collection

# get_password_hash: Hash password v·ªõi bcrypt
# verify_password: So s√°nh password ƒë√£ hash
# create_access_token: T·∫°o JWT token
from app.utils.auth import get_password_hash, verify_password, create_access_token

# send_verification_email: G·ª≠i email x√°c th·ª±c
# send_welcome_email: G·ª≠i email ch√†o m·ª´ng
from app.utils.email import send_verification_email, send_welcome_email

# auth_user: Middleware x√°c th·ª±c user t·ª´ JWT token
from app.middleware.auth_user import auth_user

# ObjectId: Ki·ªÉu d·ªØ li·ªáu _id c·ªßa MongoDB
from bson import ObjectId

# datetime: X·ª≠ l√Ω ng√†y gi·ªù (createdAt, updatedAt)
from datetime import datetime

# ============================================================================
# ROUTER INITIALIZATION - Kh·ªüi t·∫°o router
# ============================================================================
router = APIRouter()  # T·∫°o router instance cho user routes

# ============================================================================
# REGISTER ENDPOINT - API ƒêƒÉng k√Ω t√†i kho·∫£n
# ============================================================================
@router.post("/register", response_model=dict)  # POST /api/user/register
async def register_user(user: UserCreate, background_tasks: BackgroundTasks):
    """
    ƒêƒÉng k√Ω t√†i kho·∫£n customer m·ªõi v·ªõi x√°c th·ª±c email
    - Ki·ªÉm tra email ƒë√£ t·ªìn t·∫°i ch∆∞a
    - Validate password m·∫°nh (√≠t nh·∫•t 8 k√Ω t·ª±, c√≥ ch·ªØ hoa, k√Ω t·ª± ƒë·∫∑c bi·ªát)
    - Hash password tr∆∞·ªõc khi l∆∞u
    - G·ª≠i email x√°c th·ª±c
    - T·∫°o account v·ªõi role = customer (ch∆∞a active, ƒë·ª£i x√°c th·ª±c email)
    """
    # L·∫•y collection 'users' t·ª´ MongoDB
    users_collection = await get_collection("users")
    
    # ========================================================================
    # B∆Ø·ªöC 1: Ki·ªÉm tra email ƒë√£ t·ªìn t·∫°i ch∆∞a
    # ========================================================================
    # T√¨m user c√≥ email tr√πng trong database
    existing_user = await users_collection.find_one({"email": user.email})
    
    # N·∫øu email ƒë√£ t·ªìn t·∫°i ‚Üí throw error 400 Bad Request
    if existing_user:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,  # Status code 400
            detail="Email already registered"  # Th√¥ng b√°o l·ªói
        )
    
    # ========================================================================
    # B∆Ø·ªöC 1.5: Validate password m·∫°nh
    # ========================================================================
    password = user.password
    
    # Ki·ªÉm tra ƒë·ªô d√†i t·ªëi thi·ªÉu 8 k√Ω t·ª±
    if len(password) < 8:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="Password must be at least 8 characters long"
        )
    
    # Ki·ªÉm tra c√≥ √≠t nh·∫•t 1 ch·ªØ c√°i in hoa
    if not any(char.isupper() for char in password):
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="Password must contain at least one uppercase letter"
        )
    
    # Ki·ªÉm tra c√≥ √≠t nh·∫•t 1 ch·ªØ c√°i th∆∞·ªùng
    if not any(char.islower() for char in password):
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="Password must contain at least one lowercase letter"
        )
    
    # Ki·ªÉm tra c√≥ √≠t nh·∫•t 1 ch·ªØ s·ªë
    if not any(char.isdigit() for char in password):
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="Password must contain at least one number"
        )
    
    # Ki·ªÉm tra c√≥ √≠t nh·∫•t 1 k√Ω t·ª± ƒë·∫∑c bi·ªát
    special_characters = "!@#$%^&*()_+-=[]{}|;:,.<>?/"
    if not any(char in special_characters for char in password):
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="Password must contain at least one special character (!@#$%^&*()_+-=[]{}|;:,.<>?/)"
        )
    
    # ========================================================================
    # B∆Ø·ªöC 2: M√£ h√≥a password
    # ========================================================================
    # Hash password b·∫±ng bcrypt ƒë·ªÉ b·∫£o m·∫≠t (kh√¥ng l∆∞u plain text)
    hashed_password = get_password_hash(user.password)
    
    # ========================================================================
    # B∆Ø·ªöC 3: T·∫°o document user m·ªõi
    # ========================================================================
    user_doc = {
        "name": user.name,              # T√™n ng∆∞·ªùi d√πng
        "email": user.email,            # Email (unique)
        "password": hashed_password,    # Password ƒë√£ ƒë∆∞·ª£c hash
        "cartData": {},                 # Gi·ªè h√†ng tr·ªëng {}
        "role": "customer",             # Role m·∫∑c ƒë·ªãnh l√† customer
        "emailVerified": False,         # üëà Ch∆∞a x√°c th·ª±c email
        "isActive": False,              # üëà T√†i kho·∫£n ch∆∞a active (ƒë·ª£i x√°c th·ª±c email)
        "createdAt": datetime.utcnow(), # Th·ªùi gian t·∫°o (UTC)
        "updatedAt": datetime.utcnow()  # Th·ªùi gian c·∫≠p nh·∫≠t
    }
    
    # ========================================================================
    # B∆Ø·ªöC 4: L∆∞u v√†o MongoDB
    # ========================================================================
    # Insert document v√†o collection users
    result = await users_collection.insert_one(user_doc)
    user_id = str(result.inserted_id)  # L·∫•y ID c·ªßa user v·ª´a t·∫°o
    
    # ========================================================================
    # B∆Ø·ªöC 5: G·ª≠i email x√°c th·ª±c (background task - kh√¥ng block response)
    # ========================================================================
    # BackgroundTasks cho ph√©p g·ª≠i email b·∫•t ƒë·ªìng b·ªô sau khi tr·∫£ response
    # User kh√¥ng ph·∫£i ƒë·ª£i email g·ª≠i xong m·ªõi nh·∫≠n ƒë∆∞·ª£c response
    background_tasks.add_task(
        send_verification_email,
        email=user.email,
        name=user.name,
        user_id=user_id
    )
    
    # ========================================================================
    # B∆Ø·ªöC 6: Tr·∫£ v·ªÅ response th√†nh c√¥ng
    # ========================================================================
    return {
        "success": True,
        "message": "Registration successful! Please check your email to verify your account."
    }

# ============================================================================
# LOGIN ENDPOINT - API ƒêƒÉng nh·∫≠p
# ============================================================================
@router.post("/login", response_model=dict)  # POST /api/user/login
async def login_user(user: UserLogin, response: Response):
    """
    ƒêƒÉng nh·∫≠p customer
    - Ki·ªÉm tra email & password
    - T·∫°o JWT token
    - L∆∞u token v√†o HTTP-only cookie
    """
    # L·∫•y collection 'users' t·ª´ MongoDB
    users_collection = await get_collection("users")
    
    # ========================================================================
    # B∆Ø·ªöC 1: T√¨m user theo email
    # ========================================================================
    # T√¨m user c√≥ email kh·ªõp trong database
    db_user = await users_collection.find_one({"email": user.email})
    
    # N·∫øu kh√¥ng t√¨m th·∫•y email ‚Üí throw error 401 Unauthorized
    if not db_user:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,  # Status code 401
            detail="Invalid email or password"  # Message chung (b·∫£o m·∫≠t)
        )
    
    # ========================================================================
    # B∆Ø·ªöC 2: Verify password
    # ========================================================================
    # So s√°nh password ng∆∞·ªùi d√πng nh·∫≠p v·ªõi password ƒë√£ hash trong DB
    # verify_password(plain_text, hashed_password) ‚Üí True/False
    if not verify_password(user.password, db_user["password"]):
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,  # Status code 401
            detail="Invalid email or password"  # Message chung (b·∫£o m·∫≠t)
        )
    
    # ========================================================================
    # B∆Ø·ªöC 3: Ki·ªÉm tra email ƒë√£ x√°c th·ª±c ch∆∞a
    # ========================================================================
    # Ki·ªÉm tra field emailVerified (n·∫øu kh√¥ng c√≥ field n√†y th√¨ m·∫∑c ƒë·ªãnh l√† True cho user c≈©)
    if not db_user.get("emailVerified", True):
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,  # Status code 403
            detail="Please verify your email before logging in. Check your inbox for verification link."
        )
    
    # ========================================================================
    # B∆Ø·ªöC 4: Ki·ªÉm tra t√†i kho·∫£n c√≥ active kh√¥ng
    # ========================================================================
    # L·∫•y field isActive, default = True n·∫øu kh√¥ng c√≥ field n√†y
    if not db_user.get("isActive", True):
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,  # Status code 403
            detail="Account is inactive"  # T√†i kho·∫£n b·ªã v√¥ hi·ªáu h√≥a
        )
    
    # ========================================================================
    # B∆Ø·ªöC 5: T·∫°o JWT access token
    # ========================================================================
    # Payload data s·∫Ω ƒë∆∞·ª£c encode v√†o token
    token_data = {
        "user_id": str(db_user["_id"]),  # Convert ObjectId ‚Üí string
        "email": db_user["email"],        # Email c·ªßa user
        "role": db_user.get("role", "customer")  # Role (customer/admin/staff)
    }
    
    # T·∫°o JWT token v·ªõi payload tr√™n
    # Token s·∫Ω c√≥ expiry time (default 7 days)
    access_token = create_access_token(data=token_data)
    
    # ========================================================================
    # B∆Ø·ªöC 6: L∆∞u token v√†o HTTP-only cookie
    # ========================================================================
    response.set_cookie(
        key="token",              # T√™n cookie
        value=access_token,       # Gi√° tr·ªã = JWT token
        httponly=True,            # Kh√¥ng cho JS ƒë·ªçc (b·∫£o m·∫≠t XSS)
        max_age=60 * 60 * 24 * 7, # Expire sau 7 ng√†y (gi√¢y)
        samesite="lax"            # CSRF protection
    )
    
    # ========================================================================
    # B∆Ø·ªöC 7: Tr·∫£ v·ªÅ response th√†nh c√¥ng
    # ========================================================================
    return {
        "success": True,           # Flag th√†nh c√¥ng
        "message": "Login successful",  # Th√¥ng b√°o
        "token": access_token      # Token (cho client n·∫øu c·∫ßn)
    }

# ============================================================================
# LOGOUT ENDPOINT - API ƒêƒÉng xu·∫•t
# ============================================================================
@router.post("/logout", response_model=dict)  # POST /api/user/logout
async def logout_user(response: Response):
    """
    ƒêƒÉng xu·∫•t user
    - X√≥a token cookie
    """
    # ========================================================================
    # X√≥a cookie "token" kh·ªèi browser
    # ========================================================================
    response.delete_cookie(key="token")  # Delete cookie c√≥ t√™n "token"
    
    return {
        "success": True,              # Flag th√†nh c√¥ng
        "message": "Logout successful"  # Th√¥ng b√°o
    }

# ============================================================================
# CHECK AUTH ENDPOINT - API Ki·ªÉm tra tr·∫°ng th√°i ƒëƒÉng nh·∫≠p
# ============================================================================
@router.get("/is-auth", response_model=dict)  # GET /api/user/is-auth
async def is_authenticated(request: Request):
    """
    Ki·ªÉm tra user c√≥ ƒëang login kh√¥ng
    - ƒê·ªçc token t·ª´ cookie
    - Verify JWT token
    - Tr·∫£ v·ªÅ user info n·∫øu valid
    """
    try:
        # ====================================================================
        # B∆Ø·ªöC 1: G·ªçi middleware auth_user
        # ====================================================================
        # auth_user s·∫Ω:
        # 1. ƒê·ªçc token t·ª´ cookie
        # 2. Decode JWT token
        # 3. T√¨m user trong DB
        # 4. Return user document
        user = await auth_user(request)
        
        # ====================================================================
        # B∆Ø·ªöC 2: Format user data
        # ====================================================================
        # Convert ObjectId ‚Üí string ƒë·ªÉ JSON serialize ƒë∆∞·ª£c
        user["_id"] = str(user["_id"])
        
        # X√≥a field password kh·ªèi response (b·∫£o m·∫≠t)
        user.pop("password", None)
        
        # ====================================================================
        # B∆Ø·ªöC 3: Tr·∫£ v·ªÅ user info
        # ====================================================================
        return {
            "success": True,  # User ƒë√£ login
            "user": user      # Th√¥ng tin user (kh√¥ng c√≥ password)
        }
    except:
        # ====================================================================
        # N·∫øu auth_user throw error ‚Üí user ch∆∞a login ho·∫∑c token invalid
        # ====================================================================
        return {
            "success": False,  # User ch∆∞a login
            "user": None       # Kh√¥ng c√≥ user info
        }

# ============================================================================
# GET PROFILE ENDPOINT - API L·∫•y th√¥ng tin user (Protected)
# ============================================================================
@router.get("/profile", response_model=dict)  # GET /api/user/profile
async def get_profile(request: Request, user: dict = Depends(auth_user)):
    """
    L·∫•y th√¥ng tin profile c·ªßa user ƒëang login
    - Route n√†y PROTECTED (c·∫ßn login)
    - Depends(auth_user) s·∫Ω t·ª± ƒë·ªông verify token
    """
    # ========================================================================
    # Depends(auth_user) ƒë√£ verify token v√† l·∫•y user t·ª´ DB
    # N·∫øu token invalid ‚Üí auth_user throw 401 error t·ª± ƒë·ªông
    # ========================================================================
    
    # Convert ObjectId ‚Üí string
    user["_id"] = str(user["_id"])
    
    # X√≥a password kh·ªèi response
    user.pop("password", None)
    
    # Tr·∫£ v·ªÅ user info
    return {
        "success": True,  # Th√†nh c√¥ng
        "user": user      # Th√¥ng tin user (c√≥ role, cartData, ...)
    }

# ============================================================================
# VERIFY EMAIL ENDPOINT - API X√°c th·ª±c email
# ============================================================================
@router.get("/verify-email", response_model=dict)  # GET /api/user/verify-email?token=xxx
async def verify_email(token: str, background_tasks: BackgroundTasks):
    """
    X√°c th·ª±c email t·ª´ link trong email
    - Decode JWT token t·ª´ query parameter
    - Ki·ªÉm tra token h·ª£p l·ªá v√† ƒë√∫ng m·ª•c ƒë√≠ch
    - C·∫≠p nh·∫≠t emailVerified=True v√† isActive=True
    - G·ª≠i email ch√†o m·ª´ng (optional)
    """
    from app.utils.auth import decode_access_token
    
    try:
        # ====================================================================
        # B∆Ø·ªöC 1: Decode v√† validate token
        # ====================================================================
        # Decode JWT token ƒë·ªÉ l·∫•y payload
        payload = decode_access_token(token)
        
        # L·∫•y th√¥ng tin t·ª´ payload
        user_id = payload.get("user_id")
        email = payload.get("email")
        purpose = payload.get("purpose")
        
        # Ki·ªÉm tra token c√≥ ƒë√∫ng m·ª•c ƒë√≠ch "email_verification" kh√¥ng
        if purpose != "email_verification":
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="Invalid verification token purpose"
            )
        
        # ====================================================================
        # B∆Ø·ªöC 2: C·∫≠p nh·∫≠t user trong database
        # ====================================================================
        users_collection = await get_collection("users")
        
        # C·∫≠p nh·∫≠t emailVerified=True v√† isActive=True
        result = await users_collection.update_one(
            {"_id": ObjectId(user_id), "email": email},  # T√¨m user theo _id v√† email
            {
                "$set": {
                    "emailVerified": True,        # ƒê√£ x√°c th·ª±c email
                    "isActive": True,             # K√≠ch ho·∫°t t√†i kho·∫£n
                    "updatedAt": datetime.utcnow()  # C·∫≠p nh·∫≠t timestamp
                }
            }
        )
        
        # Ki·ªÉm tra xem c√≥ update ƒë∆∞·ª£c kh√¥ng
        if result.matched_count == 0:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="User not found or email mismatch"
            )
        
        # ====================================================================
        # B∆Ø·ªöC 3: L·∫•y th√¥ng tin user ƒë·ªÉ g·ª≠i email ch√†o m·ª´ng
        # ====================================================================
        user = await users_collection.find_one({"_id": ObjectId(user_id)})
        
        if user:
            # G·ª≠i email ch√†o m·ª´ng (background task)
            background_tasks.add_task(
                send_welcome_email,
                email=user["email"],
                name=user["name"]
            )
        
        # ====================================================================
        # B∆Ø·ªöC 4: Tr·∫£ v·ªÅ response th√†nh c√¥ng
        # ====================================================================
        return {
            "success": True,
            "message": "Email verified successfully! Your account is now active. You can login now."
        }
        
    except HTTPException:
        # Re-raise HTTPException (ƒë√£ c√≥ status code v√† detail)
        raise
    except Exception as e:
        # C√°c l·ªói kh√°c (token expired, invalid format...)
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="Invalid or expired verification token"
        )

# ============================================================================
# RESEND VERIFICATION EMAIL ENDPOINT - G·ª≠i l·∫°i email x√°c th·ª±c
# ============================================================================
@router.post("/resend-verification", response_model=dict)
async def resend_verification_email(email: str, background_tasks: BackgroundTasks):
    """
    G·ª≠i l·∫°i email x√°c th·ª±c cho user ch∆∞a verify
    - T√¨m user theo email
    - Ki·ªÉm tra ch∆∞a verify
    - G·ª≠i l·∫°i email x√°c th·ª±c
    """
    users_collection = await get_collection("users")
    
    # ========================================================================
    # B∆Ø·ªöC 1: T√¨m user theo email
    # ========================================================================
    user = await users_collection.find_one({"email": email})
    
    if not user:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="User not found with this email"
        )
    
    # ========================================================================
    # B∆Ø·ªöC 2: Ki·ªÉm tra email ƒë√£ verify ch∆∞a
    # ========================================================================
    if user.get("emailVerified", False):
        return {
            "success": False,
            "message": "Email is already verified. You can login now."
        }
    
    # ========================================================================
    # B∆Ø·ªöC 3: G·ª≠i l·∫°i email x√°c th·ª±c
    # ========================================================================
    background_tasks.add_task(
        send_verification_email,
        email=user["email"],
        name=user["name"],
        user_id=str(user["_id"])
    )
    
    return {
        "success": True,
        "message": "Verification email has been sent. Please check your inbox."
    }
